/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/
package com.archetypesoftware.eatalian.domain.orders;

import java.util.*;
import java.time.*;

import javax.persistence.*;
import javax.validation.constraints.*;

import com.archetypesoftware.eatalian.domain.accounts.Account;
import com.archetypesoftware.eatalian.domain.accounts.Address;
// ----------- << imports@AAAAAAFs1+t+RIp8aYA= >>
// ----------- >>

@Entity
@Table(name = "customers_orders")
// ----------- << class.annotations@AAAAAAFs1+t+RIp8aYA= >>
// ----------- >>
public class Order {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    // ----------- << id.annotations@AAAAAAFs1+t+RIp8aYA= >>
    // ----------- >>
    private Long id;

    @Version
    // ----------- << version.annotations@AAAAAAFs1+t+RIp8aYA= >>
    // ----------- >>
    private Long version;

    @Enumerated(EnumType.STRING)
    @NotNull
    @Column(nullable = false)
    // ----------- << attribute.annotations@AAAAAAFs1/C6zo28Ntg= >>
    // ----------- >>
    private OrderState state;

    @NotNull
    @Column(nullable = false)
    // ----------- << attribute.annotations@AAAAAAFs1/HVwY6TfgU= >>
    // ----------- >>
    private LocalDateTime dateOfCreation;

    @Column
    // ----------- << attribute.annotations@AAAAAAFs1/H1tY6mEFg= >>
    // ----------- >>
    private LocalDateTime dateOfDelivery;

    @OneToMany(mappedBy = "customerOrder")
    // ----------- << attribute.annotations@AAAAAAFs1+6up4uN99c= >>
    // ----------- >>
    private Set<Request> requests = new HashSet<>();

    @NotNull
    @ManyToOne
    @JoinColumn(name = "account_id")
    // ----------- << attribute.annotations@AAAAAAFs1/PqSI+M0KA= >>
    // ----------- >>
    private Account account;

    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name="streetAndNo", column = @Column(name = "deliveryAddress_streetAndNo")),
        @AttributeOverride(name="city", column = @Column(name = "deliveryAddress_city")),
        @AttributeOverride(name="postalCode", column = @Column(name = "deliveryAddress_postalCode")),
        @AttributeOverride(name="country", column = @Column(name = "deliveryAddress_country")),
        @AttributeOverride(name="floor", column = @Column(name = "deliveryAddress_floor"))
    })
    // ----------- << attribute.annotations@AAAAAAFs1/PxCY/S7aM= >>
    // ----------- >>
    private Address deliveryAddress;

    // ----------- << getId.annotations@AAAAAAFs1+t+RIp8aYA= >>
    // ----------- >>
    public Long getId(){
        return id;
    }

    public OrderState getState() {
        return state;
    }

    public LocalDateTime getDateOfCreation() {
        return dateOfCreation;
    }

    public LocalDateTime getDateOfDelivery() {
        return dateOfDelivery;
    }

    public Set<Request> getRequests() {
        return requests;
    }

    public Account getAccount() {
        return account;
    }

    public Address getDeliveryAddress() {
        return deliveryAddress;
    }

    public Order setState(OrderState state) {
        this.state = state;
        return this;
    }

    public Order setDateOfCreation(LocalDateTime dateOfCreation) {
        this.dateOfCreation = dateOfCreation;
        return this;
    }

    public Order setDateOfDelivery(LocalDateTime dateOfDelivery) {
        this.dateOfDelivery = dateOfDelivery;
        return this;
    }

    public Order setAccount(Account account) {
        this.account = account;
        return this;
    }

    public Order setDeliveryAddress(Address deliveryAddress) {
        this.deliveryAddress = deliveryAddress;
        return this;
    }

    public Order linkRequests(Request _requests) {
        if (_requests != null) {
            _requests.unlinkCustomerOrder();
            _requests.setCustomerOrder(this);
            getRequests().add(_requests);
        }
        return this;
    }

    public Order linkAccount(Account _account) {
        setAccount(_account);
        return this;
    }

    public Order linkDeliveryAddress(Address _deliveryAddress) {
        setDeliveryAddress(_deliveryAddress);
        return this;
    }

    public Order unlinkRequests(Request _requests) {
        if (_requests != null) {
            _requests.setCustomerOrder(null);
            getRequests().remove(_requests);
        }
        return this;
    }

    public Order unlinkRequests(Request _requests, Iterator<Request> it) {
        if (_requests != null) {
            _requests.setCustomerOrder(null);
            it.remove();
        }
        return this;
    }

    public Order unlinkAccount() {
        setAccount(null);
        return this;
    }

    public Order unlinkDeliveryAddress() {
        setDeliveryAddress(null);
        return this;
    }

    // ----------- << equals.annotations@AAAAAAFs1+t+RIp8aYA= >>
    // ----------- >>
    @Override
    public boolean equals(Object obj) {
        if (super.equals(obj)) return true;
        if (getId() == null) return false;
        return obj instanceof Order && (getId().equals(((Order) obj).getId()));
    }

    // ----------- << hashCode.annotations@AAAAAAFs1+t+RIp8aYA= >>
    // ----------- >>
    @Override
    public int hashCode() {
        return 351;
    }

// ----------- << class.extras@AAAAAAFs1+t+RIp8aYA= >>
// ----------- >>
}